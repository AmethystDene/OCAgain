buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'scala'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = config.mod.version
group = config.mod.group
archivesBaseName = config.mod.name

def getGitRef() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Throwable e) {
        return "unknown"
    }
}

if (System.getenv("PROMOTED_NUMBER") != null)
    version += ".${System.getenv("PROMOTED_NUMBER")}"
else if (System.getenv("BUILD_NUMBER") != null)
    version += ".${System.getenv("BUILD_NUMBER")}"
else
    version += "+" + getGitRef()

ext.simpleVersion = version
version = "MC${config.minecraft.version}-${project.version}"

minecraft {
    mappings channel: "official", version: config.minecraft.version

    accessTransformer = file("src/main/resources/META-INF/oc_at.cfg")

    runs {
        client {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            mods {
                opencomputers {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url "https://maven.cil.li/"
        content {
            includeGroup "li.cil.tis3d"
        }
    }
    maven {
        url "https://dvs1.progwml6.com/files/maven"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        url "https://maven.tehnut.info/"
        content {
            includeGroup "mcp.mobius.waila"
        }
    }
    maven {
        url "https://chickenbones.net/maven/"
        content {
            includeGroup "codechicken"
            includeGroup "mrtjp"
        }
    }
    maven {
        url "https://squiddev.cc/maven/"
        content {
            includeGroup "org.squiddev"
        }
    }
    maven {
        url "https://modmaven.dev/"
        content {
            includeGroup "appeng"
            includeGroup "mekanism"
        }
    }
}

configurations {
    embedded
    implementation.extendsFrom embedded
}

dependencies {
    var jeiSlug = "jei-${config.minecraft.version}"
    
    minecraft "net.minecraftforge:forge:${config.minecraft.version}-${config.forge.version}"
    implementation "com.typesafe:config:1.2.1"
    implementation "org.scala-lang:scala-library:2.12.+"

    compileOnly fg.deobf("li.cil.tis3d:tis3d-1.16.5-forge:${config.tis3d.version}")
    compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${config.hwyla.version}:api")
    compileOnly fg.deobf("org.squiddev:cc-tweaked-${config.minecraft.version}:${config.cct.version}")

    compileOnly ("appeng:appliedenergistics2:${config.ae2.version}:api") {
        transitive = false
    }

    compileOnly("mekanism:Mekanism:${config.mekanism.version}:api") {
        transitive = false
    }

    compileOnly ("codechicken:CBMultipart:${config.cbmultipart.version}:universal") {
        exclude module: jeiSlug
        exclude module: "CodeChickenLib"
    }

    compileOnly ("codechicken:ChickenASM:${config.casm.version}")

    compileOnly "mezz.jei:${jeiSlug}:${config.jei.version}"
    compileOnly "codechicken:CodeChickenLib:${config.ccl.version}:universal"

    compileOnly ("mrtjp:ProjectRed:${config.projred.version}:core") {
        exclude module: "CodeChickenLib"
        exclude module: jeiSlug
        exclude module: "CBMultipart"
    }

    embedded files('libs/OpenComputers-JNLua.jar', 'libs/OpenComputers-LuaJ.jar')

    compileOnly "codechicken:EnderStorage:${config.enderstorage.version}:universal"
}

processResources {
    inputs.property "version", project.simpleVersion
    inputs.property "mcversion", config.minecraft.version
    inputs.property "fversion", config.forge.version
    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy = "include"
        include 'META-INF/mods.toml'
        expand 'version':project.simpleVersion, 'mcversion':config.minecraft.version, 'fversion':config.forge.version
    }
    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy = "include"
        include 'application.conf'
        filter { line ->
            line.replaceAll("@VERSION@", project.simpleVersion)
        }
    }
}

allprojects {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

jar {
    configurations.embedded.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
    manifest {
        attributes([
            "Specification-Title": "opencomputers",
            "Specification-Vendor": "li.cil.oc",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.simpleVersion}",
            "Implementation-Vendor": "${config.mod.group}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "FMLCorePlugin": "li.cil.oc.common.launch.TransformerLoader",
            "FMLCorePluginContainsFMLMod": "true"
        ])
    }
}

javadoc {
    include 'li/cil/oc/api/**'
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    classifier = 'api'
    include 'li/cil/oc/api/**'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier 'javadoc'
}

artifacts {
    archives apiJar
    archives javadocJar
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact apiJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            url System.getenv("MAVEN_PATH")
        }
    }
}

curseforge {
    apiKey = project.hasProperty("curseForgeApiKey") ? project.curseForgeApiKey : ""
    project {
        id = config.curse.project.id
        releaseType = config.curse.project.releaseType
        changelogType = "markdown"
        changelog = file("changelog.md")
        addGameVersion config.minecraft.version
        addGameVersion "Java 8"
    }
}
